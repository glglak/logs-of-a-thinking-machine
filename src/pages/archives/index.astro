---
import { getCollection } from "astro:content";
import DevLayout from "@/layouts/DevLayout.astro";
import Card from "@/components/Card.astro";
import getPostsByGroupCondition from "@/utils/getPostsByGroupCondition";
import { SITE } from "@/config";

// Redirect to 404 page if `showArchives` config is false
if (!SITE.showArchives) {
  return Astro.redirect("/404");
}

const posts = await getCollection("blog", ({ data }) => !data.draft);

const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];
---

<DevLayout title={`Archives | ${SITE.title}`} description="All the articles I've archived.">
  <!-- Page Header -->
  <div class="mb-8 bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700">
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Archives</h1>
    <p class="text-gray-600 dark:text-gray-300">All the articles I've archived.</p>
  </div>
  
  <!-- Archives Content -->
  <div class="space-y-8">
    {
      Object.entries(
        getPostsByGroupCondition(posts, post =>
          post.data.pubDatetime.getFullYear()
        )
      )
        .sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
        .map(([year, yearGroup]) => (
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
              {year}
              <sup class="text-sm text-gray-500 dark:text-gray-400 ml-1">{yearGroup.length}</sup>
            </h2>
            
            {Object.entries(
              getPostsByGroupCondition(
                yearGroup,
                post => post.data.pubDatetime.getMonth() + 1
              )
            )
              .sort(([monthA], [monthB]) => Number(monthB) - Number(monthA))
              .map(([month, monthGroup]) => (
                <div class="mb-6 last:mb-0">
                  <div class="flex flex-col sm:flex-row">
                    <div class="min-w-36 mb-4 sm:mb-0 sm:mr-6">
                      <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">
                        {months[Number(month) - 1]}
                        <sup class="text-xs text-gray-500 dark:text-gray-400 ml-1">{monthGroup.length}</sup>
                      </h3>
                    </div>
                    <ul class="flex-1 space-y-4">
                      {monthGroup
                        .sort(
                          (a, b) =>
                            Math.floor(
                              new Date(b.data.pubDatetime).getTime() / 1000
                            ) -
                            Math.floor(
                              new Date(a.data.pubDatetime).getTime() / 1000
                            )
                        )
                        .map(post => (
                          <Card {...post} />
                        ))}
                    </ul>
                  </div>
                </div>
              ))}
          </div>
        ))
    }
  </div>
</DevLayout>
